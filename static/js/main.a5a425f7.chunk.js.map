{"version":3,"sources":["logic/Grid.js","components/VisualCell.js","components/GameGrid.js","components/StartButton.js","components/StopButton.js","components/ClearButton.js","components/App.js","serviceWorker.js","logic/Cell.js","redux/reducers.js","redux/store.js","index.js"],"names":["cloneGrid","grid","map","row","cell","cloneDeep","VisualCell","render","onClick","className","getTileColor","newGrid","props","cellPos","y","x","isAlive","updateGrid","React","Component","connect","game","gameState","state","dispatch","updatedGrid","type","isNeighbourAlive","length","GameGrid","componentDidMount","timerId","setInterval","oldGrid","aliveNeighbours","componentWillUnmount","clearInterval","Container","style","width","height","ResponsiveEmbed","Table","bordered","size","key","tile","startGame","Button","stopGame","clearGrid","App","Boolean","window","location","hostname","match","Cell","this","createGrid","Array","from","v","w","initialGameData","store","createStore","combineReducers","action","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5a425f7.chunk.js","sourcesContent":["import cloneDeep from \"lodash.clonedeep\";\n\nexport const cloneGrid = (grid) =>\n  grid.map((row) => {\n    return row.map((cell) => {\n      return cloneDeep(cell);\n    });\n  });\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { cloneGrid } from \"../logic/Grid\";\n\nclass VisualCell extends React.Component {\n  render = () => {\n    return <td onClick={this.onClick} className={this.getTileColor()}></td>;\n  };\n\n  onClick = () => {\n    let newGrid = cloneGrid(this.props.grid);\n    let cell = newGrid[this.props.cellPos.y][this.props.cellPos.x];\n    cell.isAlive = !cell.isAlive;\n    this.props.updateGrid(newGrid);\n  };\n\n  getTileColor = () => {\n    return this.props.grid[this.props.cellPos.y][this.props.cellPos.x].isAlive ? \"bg-dark\" : \"bg-light\";\n  };\n}\n\nconst mapStateToProps = ({ game, grid }) => {\n  return { gameState: game.state, grid };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateGrid: (updatedGrid) => dispatch({ type: \"grid/updateGrid\", updatedGrid: updatedGrid }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualCell);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Table from \"react-bootstrap/Table\";\nimport ResponsiveEmbed from \"react-bootstrap/ResponsiveEmbed\";\nimport Container from \"react-bootstrap/Container\";\nimport VisualCell from \"./VisualCell\";\nimport { cloneGrid } from \"../logic/Grid\";\n\nfunction isNeighbourAlive(x, y, grid) {\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[0].length) return false;\n  return grid[y][x].isAlive;\n}\n\nclass GameGrid extends React.Component {\n  componentDidMount = () => {\n    this.timerId = setInterval(() => {\n      if (this.props.gameState === \"RUNNING\") {\n        const oldGrid = this.props.grid;\n        let updatedGrid = cloneGrid(oldGrid);\n\n        for (let y = 0; y < updatedGrid.length; ++y) {\n          for (let x = 0; x < updatedGrid[y].length; ++x) {\n            let aliveNeighbours = 0;\n            if (isNeighbourAlive(x - 1, y - 1, oldGrid)) aliveNeighbours++;\n            if (isNeighbourAlive(x, y - 1, oldGrid)) aliveNeighbours++;\n            if (isNeighbourAlive(x + 1, y - 1, oldGrid)) aliveNeighbours++;\n            if (isNeighbourAlive(x - 1, y, oldGrid)) aliveNeighbours++;\n            if (isNeighbourAlive(x + 1, y, oldGrid)) aliveNeighbours++;\n            if (isNeighbourAlive(x - 1, y + 1, oldGrid)) aliveNeighbours++;\n            if (isNeighbourAlive(x, y + 1, oldGrid)) aliveNeighbours++;\n            if (isNeighbourAlive(x + 1, y + 1, oldGrid)) aliveNeighbours++;\n\n            let cell = updatedGrid[y][x];\n            if (!cell.isAlive && aliveNeighbours === 3) cell.isAlive = true;\n            else if (cell.isAlive && (aliveNeighbours < 2 || aliveNeighbours > 3)) cell.isAlive = false;\n          }\n        }\n\n        this.props.updateGrid(updatedGrid);\n      }\n    }, 1000);\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.timerId);\n  };\n\n  render = () => {\n    return (\n      <Container style={{ width: 600, height: \"auto\" }}>\n        <ResponsiveEmbed>\n          <Table bordered size=\"sm\">\n            <tbody>\n              {this.props.grid.map((row) => (\n                <tr key={\"row: \" + row[0].y}>\n                  {row.map((tile) => (\n                    <VisualCell cellPos={{ x: tile.x, y: tile.y }} key={\"x: \" + tile.x + \", y: \" + tile.y} />\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </ResponsiveEmbed>\n      </Container>\n    );\n  };\n}\n\nconst mapStateToProps = ({ game, grid }) => {\n  return { gameState: game.state, grid };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateGrid: (updatedGrid) => dispatch({ type: \"grid/updateGrid\", updatedGrid: updatedGrid }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameGrid);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction StartButton(props) {\n  return <Button onClick={props.startGame}>Start</Button>;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    startGame: () => dispatch({ type: \"game/startGame\" }),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(StartButton);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction StopButton(props) {\n  return <Button onClick={props.stopGame}>Stop</Button>;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    stopGame: () => dispatch({ type: \"game/stopGame\" }),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(StopButton);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction ClearButton(props) {\n  return <Button onClick={props.clearGrid}>Clear</Button>;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    clearGrid: () => dispatch({ type: \"grid/clearGrid\" }),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ClearButton);\n","import React from \"react\";\r\nimport GameGrid from \"./GameGrid\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport StartButton from \"./StartButton\";\r\nimport StopButton from \"./StopButton\";\r\nimport ClearButton from \"./ClearButton\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <GameGrid />\r\n      <StartButton />\r\n      <StopButton />\r\n      <ClearButton />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","class Cell {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.isAlive = false;\n  }\n}\n\nexport default Cell;\n","import Cell from \"../logic/Cell\";\n\nconst createGrid = () => {\n  return Array.from({ length: 50 }, (v, y) => Array.from({ length: 50 }, (w, x) => new Cell(x, y)));\n};\n\nexport function gridReducer(state = createGrid(), action) {\n  switch (action.type) {\n    case \"grid/updateGrid\":\n      return action.updatedGrid;\n    case \"grid/clearGrid\":\n      return createGrid();\n    default:\n      return state;\n  }\n}\n\nconst initialGameData = {\n  state: \"STOPPED\",\n};\n\nexport function gameReducer(state = initialGameData, action) {\n  switch (action.type) {\n    case \"game/startGame\":\n      return { ...state, state: \"RUNNING\" };\n    case \"game/stopGame\":\n      return { ...state, state: \"STOPPED\" };\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\nimport { gameReducer, gridReducer } from \"./reducers\";\n\nconst store = createStore(combineReducers({ game: gameReducer, grid: gridReducer }));\n\nexport default store;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}