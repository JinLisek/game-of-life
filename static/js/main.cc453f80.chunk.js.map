{"version":3,"sources":["components/VisualTile.js","components/GameGrid.js","components/App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["VisualTile","props","render","onClick","className","getTileColor","newTile","state","tile","isFilled","setState","React","Component","connect","grid","Container","style","width","height","ResponsiveEmbed","Table","bordered","size","map","row","key","y","x","App","Boolean","window","location","hostname","match","Tile","this","initialState","Array","from","length","v","w","store","createStore","action","type","updatedGrid","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAyBeA,E,kDAtBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,OAAS,WACP,OAAO,wBAAIC,QAAS,EAAKA,QAASC,UAAW,EAAKC,kBARjC,EAWnBF,QAAU,WACR,IAAIG,EAAU,EAAKC,MAAMC,KACzBF,EAAQG,UAAYH,EAAQG,SAC5B,EAAKC,SAAS,CAAEF,KAAMF,KAdL,EAiBnBD,aAAe,WACb,OAAO,EAAKE,MAAMC,KAAKC,SAAW,UAAY,YAhB9C,EAAKF,MAAQ,CACXC,KAAMP,EAAMO,MAHG,E,UADIG,IAAMC,WCyB/B,IAKeC,eALE,SAACN,GAEhB,MAAO,CAAEO,KADQP,EAATO,QAIKD,EAzBf,SAAkBZ,GAChB,OACE,kBAACc,EAAA,EAAD,CAAWC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,SACtC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACC,KAAK,MACnB,+BACGrB,EAAMa,KAAKS,KAAI,SAACC,GAAD,OACd,wBAAIC,IAAK,QAAUD,EAAI,GAAGE,GACvBF,EAAID,KAAI,SAACf,GAAD,OACP,kBAAC,EAAD,CAAYA,KAAMA,EAAMiB,IAAK,MAAQjB,EAAKmB,EAAI,QAAUnB,EAAKkB,kBCJhEE,MARf,WACE,OACE,kBAACb,EAAA,EAAD,KACE,kBAAC,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAC,EACJ,WAAYP,EAAGD,GAAI,oBACjBS,KAAK1B,UAAW,EAChB0B,KAAKR,EAAIA,EACTQ,KAAKT,EAAIA,GAIPU,EAAe,CACnBtB,KAAMuB,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGd,GAAJ,OAAUW,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACE,EAAGd,GAAJ,OAAU,IAAIO,EAAKP,EAAGD,UCN9F,IAEegB,EAFDC,aDSP,WAAoD,IAA/BpC,EAA8B,uDAAtB6B,EAAcQ,EAAQ,uCACxD,OAAQA,EAAOC,MACb,IAAK,kBACH,OAAO,2BAAKtC,GAAZ,IAAmBO,KAAM8B,EAAOE,cAClC,QACE,OAAOvC,MERbwC,IAAS7C,OACP,kBAAC,IAAM8C,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cc453f80.chunk.js","sourcesContent":["import React from \"react\";\n\nclass VisualTile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tile: props.tile,\n    };\n  }\n\n  render = () => {\n    return <td onClick={this.onClick} className={this.getTileColor()}></td>;\n  };\n\n  onClick = () => {\n    let newTile = this.state.tile;\n    newTile.isFilled = !newTile.isFilled;\n    this.setState({ tile: newTile });\n  };\n\n  getTileColor = () => {\n    return this.state.tile.isFilled ? \"bg-dark\" : \"bg-light\";\n  };\n}\n\nexport default VisualTile;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Table from \"react-bootstrap/Table\";\nimport ResponsiveEmbed from \"react-bootstrap/ResponsiveEmbed\";\nimport Container from \"react-bootstrap/Container\";\nimport VisualTile from \"./VisualTile\";\n\nfunction GameGrid(props) {\n  return (\n    <Container style={{ width: 600, height: \"auto\" }}>\n      <ResponsiveEmbed>\n        <Table bordered size=\"sm\">\n          <tbody>\n            {props.grid.map((row) => (\n              <tr key={\"row: \" + row[0].y}>\n                {row.map((tile) => (\n                  <VisualTile tile={tile} key={\"x: \" + tile.x + \", y: \" + tile.y} />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </ResponsiveEmbed>\n    </Container>\n  );\n}\n\nconst mapState = (state) => {\n  const { grid } = state;\n  return { grid };\n};\n\nexport default connect(mapState)(GameGrid);\n","import React from \"react\";\r\nimport GameGrid from \"./GameGrid\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <GameGrid />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","class Tile {\n  constructor(x, y) {\n    this.isFilled = false;\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst initialState = {\n  grid: Array.from({ length: 50 }, (v, y) => Array.from({ length: 50 }, (w, x) => new Tile(x, y))),\n};\n\nexport function gridReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"grid/updateGrid\":\n      return { ...state, grid: action.updatedGrid };\n    default:\n      return state;\n  }\n}\n","import { createStore } from \"redux\";\nimport { gridReducer } from \"./reducers\";\n\nconst store = createStore(gridReducer);\n\nexport default store;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}